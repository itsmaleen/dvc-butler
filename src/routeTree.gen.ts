/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as OnboardingImport } from './routes/onboarding'
import { Route as IndexImport } from './routes/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as SettingsRemoteStorageImport } from './routes/settings/remote-storage'
import { Route as SettingsLocalDataImport } from './routes/settings/local-data'
import { Route as SettingsGitConfigImport } from './routes/settings/git-config'

// Create/Update Routes

const OnboardingRoute = OnboardingImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsRemoteStorageRoute = SettingsRemoteStorageImport.update({
  id: '/settings/remote-storage',
  path: '/settings/remote-storage',
  getParentRoute: () => rootRoute,
} as any)

const SettingsLocalDataRoute = SettingsLocalDataImport.update({
  id: '/settings/local-data',
  path: '/settings/local-data',
  getParentRoute: () => rootRoute,
} as any)

const SettingsGitConfigRoute = SettingsGitConfigImport.update({
  id: '/settings/git-config',
  path: '/settings/git-config',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingImport
      parentRoute: typeof rootRoute
    }
    '/settings/git-config': {
      id: '/settings/git-config'
      path: '/settings/git-config'
      fullPath: '/settings/git-config'
      preLoaderRoute: typeof SettingsGitConfigImport
      parentRoute: typeof rootRoute
    }
    '/settings/local-data': {
      id: '/settings/local-data'
      path: '/settings/local-data'
      fullPath: '/settings/local-data'
      preLoaderRoute: typeof SettingsLocalDataImport
      parentRoute: typeof rootRoute
    }
    '/settings/remote-storage': {
      id: '/settings/remote-storage'
      path: '/settings/remote-storage'
      fullPath: '/settings/remote-storage'
      preLoaderRoute: typeof SettingsRemoteStorageImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/onboarding': typeof OnboardingRoute
  '/settings/git-config': typeof SettingsGitConfigRoute
  '/settings/local-data': typeof SettingsLocalDataRoute
  '/settings/remote-storage': typeof SettingsRemoteStorageRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/onboarding': typeof OnboardingRoute
  '/settings/git-config': typeof SettingsGitConfigRoute
  '/settings/local-data': typeof SettingsLocalDataRoute
  '/settings/remote-storage': typeof SettingsRemoteStorageRoute
  '/settings': typeof SettingsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/onboarding': typeof OnboardingRoute
  '/settings/git-config': typeof SettingsGitConfigRoute
  '/settings/local-data': typeof SettingsLocalDataRoute
  '/settings/remote-storage': typeof SettingsRemoteStorageRoute
  '/settings/': typeof SettingsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/onboarding'
    | '/settings/git-config'
    | '/settings/local-data'
    | '/settings/remote-storage'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/onboarding'
    | '/settings/git-config'
    | '/settings/local-data'
    | '/settings/remote-storage'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/onboarding'
    | '/settings/git-config'
    | '/settings/local-data'
    | '/settings/remote-storage'
    | '/settings/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  OnboardingRoute: typeof OnboardingRoute
  SettingsGitConfigRoute: typeof SettingsGitConfigRoute
  SettingsLocalDataRoute: typeof SettingsLocalDataRoute
  SettingsRemoteStorageRoute: typeof SettingsRemoteStorageRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  OnboardingRoute: OnboardingRoute,
  SettingsGitConfigRoute: SettingsGitConfigRoute,
  SettingsLocalDataRoute: SettingsLocalDataRoute,
  SettingsRemoteStorageRoute: SettingsRemoteStorageRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/onboarding",
        "/settings/git-config",
        "/settings/local-data",
        "/settings/remote-storage",
        "/settings/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/onboarding": {
      "filePath": "onboarding.tsx"
    },
    "/settings/git-config": {
      "filePath": "settings/git-config.tsx"
    },
    "/settings/local-data": {
      "filePath": "settings/local-data.tsx"
    },
    "/settings/remote-storage": {
      "filePath": "settings/remote-storage.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
