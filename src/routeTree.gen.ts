/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as OnboardingRouteImport } from './routes/onboarding'
import { Route as dashboardRouteRouteImport } from './routes/(dashboard)/route'
import { Route as SettingsIndexRouteImport } from './routes/settings/index'
import { Route as dashboardIndexRouteImport } from './routes/(dashboard)/index'
import { Route as SettingsRemoteStorageRouteImport } from './routes/settings/remote-storage'
import { Route as SettingsLocalDataRouteImport } from './routes/settings/local-data'
import { Route as SettingsGitConfigRouteImport } from './routes/settings/git-config'
import { Route as dashboardNiftiViewerRouteImport } from './routes/(dashboard)/nifti-viewer'
import { Route as dashboardDicomViewerRouteImport } from './routes/(dashboard)/dicom-viewer'

const OnboardingRoute = OnboardingRouteImport.update({
  id: '/onboarding',
  path: '/onboarding',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardRouteRoute = dashboardRouteRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsIndexRoute = SettingsIndexRouteImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardIndexRoute = dashboardIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardRouteRoute,
} as any)
const SettingsRemoteStorageRoute = SettingsRemoteStorageRouteImport.update({
  id: '/settings/remote-storage',
  path: '/settings/remote-storage',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsLocalDataRoute = SettingsLocalDataRouteImport.update({
  id: '/settings/local-data',
  path: '/settings/local-data',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsGitConfigRoute = SettingsGitConfigRouteImport.update({
  id: '/settings/git-config',
  path: '/settings/git-config',
  getParentRoute: () => rootRouteImport,
} as any)
const dashboardNiftiViewerRoute = dashboardNiftiViewerRouteImport.update({
  id: '/nifti-viewer',
  path: '/nifti-viewer',
  getParentRoute: () => dashboardRouteRoute,
} as any)
const dashboardDicomViewerRoute = dashboardDicomViewerRouteImport.update({
  id: '/dicom-viewer',
  path: '/dicom-viewer',
  getParentRoute: () => dashboardRouteRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof dashboardIndexRoute
  '/onboarding': typeof OnboardingRoute
  '/dicom-viewer': typeof dashboardDicomViewerRoute
  '/nifti-viewer': typeof dashboardNiftiViewerRoute
  '/settings/git-config': typeof SettingsGitConfigRoute
  '/settings/local-data': typeof SettingsLocalDataRoute
  '/settings/remote-storage': typeof SettingsRemoteStorageRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesByTo {
  '/onboarding': typeof OnboardingRoute
  '/dicom-viewer': typeof dashboardDicomViewerRoute
  '/nifti-viewer': typeof dashboardNiftiViewerRoute
  '/settings/git-config': typeof SettingsGitConfigRoute
  '/settings/local-data': typeof SettingsLocalDataRoute
  '/settings/remote-storage': typeof SettingsRemoteStorageRoute
  '/': typeof dashboardIndexRoute
  '/settings': typeof SettingsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/(dashboard)': typeof dashboardRouteRouteWithChildren
  '/onboarding': typeof OnboardingRoute
  '/(dashboard)/dicom-viewer': typeof dashboardDicomViewerRoute
  '/(dashboard)/nifti-viewer': typeof dashboardNiftiViewerRoute
  '/settings/git-config': typeof SettingsGitConfigRoute
  '/settings/local-data': typeof SettingsLocalDataRoute
  '/settings/remote-storage': typeof SettingsRemoteStorageRoute
  '/(dashboard)/': typeof dashboardIndexRoute
  '/settings/': typeof SettingsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/onboarding'
    | '/dicom-viewer'
    | '/nifti-viewer'
    | '/settings/git-config'
    | '/settings/local-data'
    | '/settings/remote-storage'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/onboarding'
    | '/dicom-viewer'
    | '/nifti-viewer'
    | '/settings/git-config'
    | '/settings/local-data'
    | '/settings/remote-storage'
    | '/'
    | '/settings'
  id:
    | '__root__'
    | '/(dashboard)'
    | '/onboarding'
    | '/(dashboard)/dicom-viewer'
    | '/(dashboard)/nifti-viewer'
    | '/settings/git-config'
    | '/settings/local-data'
    | '/settings/remote-storage'
    | '/(dashboard)/'
    | '/settings/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  dashboardRouteRoute: typeof dashboardRouteRouteWithChildren
  OnboardingRoute: typeof OnboardingRoute
  SettingsGitConfigRoute: typeof SettingsGitConfigRoute
  SettingsLocalDataRoute: typeof SettingsLocalDataRoute
  SettingsRemoteStorageRoute: typeof SettingsRemoteStorageRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/onboarding': {
      id: '/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof OnboardingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/': {
      id: '/(dashboard)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardIndexRouteImport
      parentRoute: typeof dashboardRouteRoute
    }
    '/settings/remote-storage': {
      id: '/settings/remote-storage'
      path: '/settings/remote-storage'
      fullPath: '/settings/remote-storage'
      preLoaderRoute: typeof SettingsRemoteStorageRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/local-data': {
      id: '/settings/local-data'
      path: '/settings/local-data'
      fullPath: '/settings/local-data'
      preLoaderRoute: typeof SettingsLocalDataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings/git-config': {
      id: '/settings/git-config'
      path: '/settings/git-config'
      fullPath: '/settings/git-config'
      preLoaderRoute: typeof SettingsGitConfigRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/(dashboard)/nifti-viewer': {
      id: '/(dashboard)/nifti-viewer'
      path: '/nifti-viewer'
      fullPath: '/nifti-viewer'
      preLoaderRoute: typeof dashboardNiftiViewerRouteImport
      parentRoute: typeof dashboardRouteRoute
    }
    '/(dashboard)/dicom-viewer': {
      id: '/(dashboard)/dicom-viewer'
      path: '/dicom-viewer'
      fullPath: '/dicom-viewer'
      preLoaderRoute: typeof dashboardDicomViewerRouteImport
      parentRoute: typeof dashboardRouteRoute
    }
  }
}

interface dashboardRouteRouteChildren {
  dashboardDicomViewerRoute: typeof dashboardDicomViewerRoute
  dashboardNiftiViewerRoute: typeof dashboardNiftiViewerRoute
  dashboardIndexRoute: typeof dashboardIndexRoute
}

const dashboardRouteRouteChildren: dashboardRouteRouteChildren = {
  dashboardDicomViewerRoute: dashboardDicomViewerRoute,
  dashboardNiftiViewerRoute: dashboardNiftiViewerRoute,
  dashboardIndexRoute: dashboardIndexRoute,
}

const dashboardRouteRouteWithChildren = dashboardRouteRoute._addFileChildren(
  dashboardRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  dashboardRouteRoute: dashboardRouteRouteWithChildren,
  OnboardingRoute: OnboardingRoute,
  SettingsGitConfigRoute: SettingsGitConfigRoute,
  SettingsLocalDataRoute: SettingsLocalDataRoute,
  SettingsRemoteStorageRoute: SettingsRemoteStorageRoute,
  SettingsIndexRoute: SettingsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
